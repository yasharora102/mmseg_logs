==========================================
SLURM_JOB_ID = 2470935
SLURM_NODELIST = gnode074
SLURM_JOB_GPUS = 1
==========================================
08/06 02:16:31 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.23 (main, Jun  5 2025, 13:40:20) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 268722126
    GPU 0: NVIDIA GeForce RTX 2080 Ti
    CUDA_HOME: /opt/cuda-12.1/
    NVCC: Cuda compilation tools, release 12.1, V12.1.66
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 268722126
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

08/06 02:16:31 - mmengine - INFO - Config:
crop_size = (
    512,
    1024,
)
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        512,
        1024,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = '/scratch/seg_benchmark/splits_flat/'
dataset_type = 'YourDataset_BIG'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False,
        interval=40000,
        save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
img_suffix = '.jpg'
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=1024,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=51,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        contract_dilation=True,
        depth=50,
        dilations=(
            1,
            1,
            2,
            4,
        ),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        norm_eval=False,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        strides=(
            1,
            2,
            1,
            1,
        ),
        style='pytorch',
        type='ResNetV1c'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            1024,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        c1_channels=48,
        c1_in_channels=256,
        channels=512,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        dropout_ratio=0.1,
        in_channels=2048,
        in_index=3,
        loss_decode=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=51,
        type='DepthwiseSeparableASPPHead'),
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=320000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
randomness = dict(seed=268722126)
resume = False
seg_map_suffix = '.png'
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(img_path='test/images', seg_map_path='test/masks'),
        data_root='/scratch/seg_benchmark/splits_flat/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                1024,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='YourDataset_BIG'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    classwise=True, iou_metrics=[
        'mIoU',
    ], type='IoUNanAbsent')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        1024,
    ), type='Resize'),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=320000, type='IterBasedTrainLoop', val_interval=40000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(img_path='train/images', seg_map_path='train/masks'),
        data_root='/scratch/seg_benchmark/splits_flat/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    1024,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    1024,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='YourDataset_BIG'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            1024,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        1024,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(img_path='test/images', seg_map_path='test/masks'),
        data_root='/scratch/seg_benchmark/splits_flat/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                1024,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='YourDataset_BIG'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '/scratch/seg_benchmark/NEW/deeplabv3p_80k_big_RESIZED_fullv1_seed_320K'

/home2/yasharora120/segmentation_benchmark/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home2/yasharora120/segmentation_benchmark/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:250: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
08/06 02:16:40 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
/home2/yasharora120/segmentation_benchmark/mmsegmentation/mmseg/engine/hooks/visualization_hook.py:60: UserWarning: The draw is False, it means that the hook for visualization will not take effect. The results will NOT be visualized or stored.
  warnings.warn('The draw is False, it means that the '
08/06 02:16:40 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
08/06 02:16:41 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
08/06 02:16:41 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
08/06 02:16:41 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
08/06 02:16:41 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

08/06 02:16:42 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
08/06 02:16:42 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
08/06 02:16:42 - mmengine - INFO - Checkpoints will be saved to /scratch/seg_benchmark/NEW/deeplabv3p_80k_big_RESIZED_fullv1_seed_320K.
08/06 02:17:24 - mmengine - INFO - Iter(train) [    50/320000]  lr: 9.9986e-03  eta: 3 days, 3:38:49  time: 0.5705  data_time: 0.0050  memory: 10283  loss: 1.8659  decode.loss_ce: 1.3374  decode.acc_seg: 59.9412  aux.loss_ce: 0.5285  aux.acc_seg: 63.4476
08/06 02:17:53 - mmengine - INFO - Iter(train) [   100/320000]  lr: 9.9972e-03  eta: 2 days, 15:19:53  time: 0.5760  data_time: 0.0053  memory: 7719  loss: 1.6147  decode.loss_ce: 1.1661  decode.acc_seg: 58.4364  aux.loss_ce: 0.4486  aux.acc_seg: 59.3496
08/06 02:18:22 - mmengine - INFO - Iter(train) [   150/320000]  lr: 9.9959e-03  eta: 2 days, 11:19:49  time: 0.5783  data_time: 0.0051  memory: 7720  loss: 1.3651  decode.loss_ce: 0.9784  decode.acc_seg: 78.3719  aux.loss_ce: 0.3866  aux.acc_seg: 80.0558
08/06 02:18:51 - mmengine - INFO - Iter(train) [   200/320000]  lr: 9.9945e-03  eta: 2 days, 9:21:41  time: 0.5801  data_time: 0.0051  memory: 7719  loss: 1.8265  decode.loss_ce: 1.3052  decode.acc_seg: 74.9641  aux.loss_ce: 0.5213  aux.acc_seg: 78.1548
08/06 02:19:20 - mmengine - INFO - Iter(train) [   250/320000]  lr: 9.9931e-03  eta: 2 days, 8:11:16  time: 0.5803  data_time: 0.0051  memory: 7719  loss: 1.4943  decode.loss_ce: 1.0561  decode.acc_seg: 52.3469  aux.loss_ce: 0.4382  aux.acc_seg: 52.2284
08/06 02:19:49 - mmengine - INFO - Iter(train) [   300/320000]  lr: 9.9917e-03  eta: 2 days, 7:24:44  time: 0.5808  data_time: 0.0050  memory: 7719  loss: 1.1525  decode.loss_ce: 0.8118  decode.acc_seg: 77.4803  aux.loss_ce: 0.3407  aux.acc_seg: 76.1208
08/06 02:20:18 - mmengine - INFO - Iter(train) [   350/320000]  lr: 9.9903e-03  eta: 2 days, 6:51:46  time: 0.5815  data_time: 0.0051  memory: 7719  loss: 1.4652  decode.loss_ce: 1.0409  decode.acc_seg: 82.8532  aux.loss_ce: 0.4243  aux.acc_seg: 79.9219
08/06 02:20:47 - mmengine - INFO - Iter(train) [   400/320000]  lr: 9.9889e-03  eta: 2 days, 6:26:49  time: 0.5808  data_time: 0.0051  memory: 7719  loss: 1.1143  decode.loss_ce: 0.7895  decode.acc_seg: 83.5151  aux.loss_ce: 0.3247  aux.acc_seg: 85.2105
08/06 02:21:16 - mmengine - INFO - Iter(train) [   450/320000]  lr: 9.9875e-03  eta: 2 days, 6:07:37  time: 0.5821  data_time: 0.0050  memory: 7719  loss: 1.1621  decode.loss_ce: 0.8308  decode.acc_seg: 70.0332  aux.loss_ce: 0.3313  aux.acc_seg: 69.0316
08/06 02:21:45 - mmengine - INFO - Iter(train) [   500/320000]  lr: 9.9861e-03  eta: 2 days, 5:52:03  time: 0.5814  data_time: 0.0051  memory: 7719  loss: 1.2312  decode.loss_ce: 0.8741  decode.acc_seg: 78.7198  aux.loss_ce: 0.3572  aux.acc_seg: 79.6054
08/06 02:22:14 - mmengine - INFO - Iter(train) [   550/320000]  lr: 9.9847e-03  eta: 2 days, 5:39:27  time: 0.5820  data_time: 0.0051  memory: 7719  loss: 1.5237  decode.loss_ce: 1.0799  decode.acc_seg: 81.6071  aux.loss_ce: 0.4438  aux.acc_seg: 79.8016
08/06 02:22:43 - mmengine - INFO - Iter(train) [   600/320000]  lr: 9.9833e-03  eta: 2 days, 5:29:12  time: 0.5837  data_time: 0.0051  memory: 7719  loss: 1.1031  decode.loss_ce: 0.7802  decode.acc_seg: 81.9634  aux.loss_ce: 0.3229  aux.acc_seg: 82.7030
08/06 02:23:12 - mmengine - INFO - Iter(train) [   650/320000]  lr: 9.9819e-03  eta: 2 days, 5:20:43  time: 0.5826  data_time: 0.0051  memory: 7720  loss: 0.6978  decode.loss_ce: 0.4970  decode.acc_seg: 87.8867  aux.loss_ce: 0.2008  aux.acc_seg: 87.0129
08/06 02:23:42 - mmengine - INFO - Iter(train) [   700/320000]  lr: 9.9805e-03  eta: 2 days, 5:13:27  time: 0.5837  data_time: 0.0051  memory: 7719  loss: 1.1595  decode.loss_ce: 0.8254  decode.acc_seg: 70.4495  aux.loss_ce: 0.3341  aux.acc_seg: 69.7060
08/06 02:24:11 - mmengine - INFO - Iter(train) [   750/320000]  lr: 9.9791e-03  eta: 2 days, 5:07:11  time: 0.5840  data_time: 0.0052  memory: 7719  loss: 1.1596  decode.loss_ce: 0.7862  decode.acc_seg: 81.1092  aux.loss_ce: 0.3734  aux.acc_seg: 78.8066
08/06 02:24:40 - mmengine - INFO - Iter(train) [   800/320000]  lr: 9.9777e-03  eta: 2 days, 5:01:30  time: 0.5839  data_time: 0.0052  memory: 7719  loss: 1.1370  decode.loss_ce: 0.8030  decode.acc_seg: 73.4194  aux.loss_ce: 0.3340  aux.acc_seg: 72.0551
08/06 02:25:09 - mmengine - INFO - Iter(train) [   850/320000]  lr: 9.9764e-03  eta: 2 days, 4:56:24  time: 0.5829  data_time: 0.0051  memory: 7719  loss: 1.0993  decode.loss_ce: 0.7892  decode.acc_seg: 84.0762  aux.loss_ce: 0.3101  aux.acc_seg: 87.2285
08/06 02:25:38 - mmengine - INFO - Iter(train) [   900/320000]  lr: 9.9750e-03  eta: 2 days, 4:51:53  time: 0.5837  data_time: 0.0051  memory: 7719  loss: 1.0999  decode.loss_ce: 0.7809  decode.acc_seg: 79.4907  aux.loss_ce: 0.3189  aux.acc_seg: 82.0353
08/06 02:26:07 - mmengine - INFO - Iter(train) [   950/320000]  lr: 9.9736e-03  eta: 2 days, 4:47:49  time: 0.5838  data_time: 0.0051  memory: 7719  loss: 1.1129  decode.loss_ce: 0.7821  decode.acc_seg: 77.6675  aux.loss_ce: 0.3308  aux.acc_seg: 76.1692
08/06 02:26:37 - mmengine - INFO - Exp name: deeplabv3plus_r50-d8_4xb2-80k_cityscapes-512x1024_modified_20250806_021627
08/06 02:26:37 - mmengine - INFO - Iter(train) [  1000/320000]  lr: 9.9722e-03  eta: 2 days, 4:44:05  time: 0.5834  data_time: 0.0052  memory: 7719  loss: 0.7935  decode.loss_ce: 0.5452  decode.acc_seg: 89.5254  aux.loss_ce: 0.2482  aux.acc_seg: 90.0859
08/06 02:27:06 - mmengine - INFO - Iter(train) [  1050/320000]  lr: 9.9708e-03  eta: 2 days, 4:40:35  time: 0.5833  data_time: 0.0052  memory: 7719  loss: 0.9621  decode.loss_ce: 0.6786  decode.acc_seg: 85.6818  aux.loss_ce: 0.2835  aux.acc_seg: 83.1174
08/06 02:27:35 - mmengine - INFO - Iter(train) [  1100/320000]  lr: 9.9694e-03  eta: 2 days, 4:37:21  time: 0.5835  data_time: 0.0052  memory: 7719  loss: 0.8611  decode.loss_ce: 0.5968  decode.acc_seg: 88.1680  aux.loss_ce: 0.2643  aux.acc_seg: 86.9208
08/06 02:28:04 - mmengine - INFO - Iter(train) [  1150/320000]  lr: 9.9680e-03  eta: 2 days, 4:34:23  time: 0.5832  data_time: 0.0050  memory: 7719  loss: 0.9202  decode.loss_ce: 0.6607  decode.acc_seg: 71.4310  aux.loss_ce: 0.2595  aux.acc_seg: 71.0910
08/06 02:28:33 - mmengine - INFO - Iter(train) [  1200/320000]  lr: 9.9666e-03  eta: 2 days, 4:31:35  time: 0.5833  data_time: 0.0050  memory: 7719  loss: 0.8452  decode.loss_ce: 0.5927  decode.acc_seg: 84.8295  aux.loss_ce: 0.2525  aux.acc_seg: 85.6129
08/06 02:29:02 - mmengine - INFO - Iter(train) [  1250/320000]  lr: 9.9652e-03  eta: 2 days, 4:28:54  time: 0.5831  data_time: 0.0051  memory: 7719  loss: 0.8150  decode.loss_ce: 0.5613  decode.acc_seg: 77.8712  aux.loss_ce: 0.2537  aux.acc_seg: 77.4129
08/06 02:29:32 - mmengine - INFO - Iter(train) [  1300/320000]  lr: 9.9638e-03  eta: 2 days, 4:26:23  time: 0.5832  data_time: 0.0051  memory: 7719  loss: 0.8211  decode.loss_ce: 0.5699  decode.acc_seg: 90.2731  aux.loss_ce: 0.2512  aux.acc_seg: 89.1128
08/06 02:30:01 - mmengine - INFO - Iter(train) [  1350/320000]  lr: 9.9624e-03  eta: 2 days, 4:23:58  time: 0.5823  data_time: 0.0050  memory: 7720  loss: 0.8252  decode.loss_ce: 0.5643  decode.acc_seg: 74.2162  aux.loss_ce: 0.2610  aux.acc_seg: 71.1532
08/06 02:30:30 - mmengine - INFO - Iter(train) [  1400/320000]  lr: 9.9610e-03  eta: 2 days, 4:21:41  time: 0.5828  data_time: 0.0053  memory: 7719  loss: 0.9121  decode.loss_ce: 0.6312  decode.acc_seg: 83.9234  aux.loss_ce: 0.2809  aux.acc_seg: 82.9905
08/06 02:30:59 - mmengine - INFO - Iter(train) [  1450/320000]  lr: 9.9596e-03  eta: 2 days, 4:19:32  time: 0.5829  data_time: 0.0052  memory: 7719  loss: 0.9440  decode.loss_ce: 0.6641  decode.acc_seg: 85.7276  aux.loss_ce: 0.2799  aux.acc_seg: 85.7010
08/06 02:31:28 - mmengine - INFO - Iter(train) [  1500/320000]  lr: 9.9583e-03  eta: 2 days, 4:17:32  time: 0.5830  data_time: 0.0052  memory: 7719  loss: 0.8670  decode.loss_ce: 0.6025  decode.acc_seg: 84.1671  aux.loss_ce: 0.2645  aux.acc_seg: 78.8424
08/06 02:31:57 - mmengine - INFO - Iter(train) [  1550/320000]  lr: 9.9569e-03  eta: 2 days, 4:15:39  time: 0.5831  data_time: 0.0051  memory: 7719  loss: 0.9185  decode.loss_ce: 0.6361  decode.acc_seg: 77.0388  aux.loss_ce: 0.2824  aux.acc_seg: 76.4763
08/06 02:32:26 - mmengine - INFO - Iter(train) [  1600/320000]  lr: 9.9555e-03  eta: 2 days, 4:13:57  time: 0.5834  data_time: 0.0053  memory: 7719  loss: 0.8760  decode.loss_ce: 0.6063  decode.acc_seg: 83.0095  aux.loss_ce: 0.2698  aux.acc_seg: 78.9301
08/06 02:32:56 - mmengine - INFO - Iter(train) [  1650/320000]  lr: 9.9541e-03  eta: 2 days, 4:12:15  time: 0.5832  data_time: 0.0053  memory: 7719  loss: 0.8266  decode.loss_ce: 0.5690  decode.acc_seg: 86.2885  aux.loss_ce: 0.2576  aux.acc_seg: 86.3580
08/06 02:33:25 - mmengine - INFO - Iter(train) [  1700/320000]  lr: 9.9527e-03  eta: 2 days, 4:10:42  time: 0.5833  data_time: 0.0052  memory: 7719  loss: 0.7195  decode.loss_ce: 0.5000  decode.acc_seg: 90.3433  aux.loss_ce: 0.2195  aux.acc_seg: 89.5199
08/06 02:33:54 - mmengine - INFO - Iter(train) [  1750/320000]  lr: 9.9513e-03  eta: 2 days, 4:09:05  time: 0.5826  data_time: 0.0050  memory: 7720  loss: 0.7335  decode.loss_ce: 0.5064  decode.acc_seg: 77.0093  aux.loss_ce: 0.2271  aux.acc_seg: 76.0453
08/06 02:34:23 - mmengine - INFO - Iter(train) [  1800/320000]  lr: 9.9499e-03  eta: 2 days, 4:07:34  time: 0.5829  data_time: 0.0052  memory: 7719  loss: 0.7636  decode.loss_ce: 0.5167  decode.acc_seg: 88.1252  aux.loss_ce: 0.2469  aux.acc_seg: 92.0665
08/06 02:34:52 - mmengine - INFO - Iter(train) [  1850/320000]  lr: 9.9485e-03  eta: 2 days, 4:06:07  time: 0.5835  data_time: 0.0051  memory: 7719  loss: 0.7936  decode.loss_ce: 0.5416  decode.acc_seg: 87.9509  aux.loss_ce: 0.2520  aux.acc_seg: 87.2816
08/06 02:35:21 - mmengine - INFO - Iter(train) [  1900/320000]  lr: 9.9471e-03  eta: 2 days, 4:04:47  time: 0.5838  data_time: 0.0052  memory: 7719  loss: 0.6986  decode.loss_ce: 0.4805  decode.acc_seg: 91.0109  aux.loss_ce: 0.2181  aux.acc_seg: 90.0723
08/06 02:35:51 - mmengine - INFO - Iter(train) [  1950/320000]  lr: 9.9457e-03  eta: 2 days, 4:03:30  time: 0.5838  data_time: 0.0052  memory: 7719  loss: 0.8266  decode.loss_ce: 0.5605  decode.acc_seg: 90.6090  aux.loss_ce: 0.2661  aux.acc_seg: 87.8170
08/06 02:36:20 - mmengine - INFO - Exp name: deeplabv3plus_r50-d8_4xb2-80k_cityscapes-512x1024_modified_20250806_021627
08/06 02:36:20 - mmengine - INFO - Iter(train) [  2000/320000]  lr: 9.9443e-03  eta: 2 days, 4:02:14  time: 0.5841  data_time: 0.0051  memory: 7719  loss: 0.8550  decode.loss_ce: 0.5839  decode.acc_seg: 83.8569  aux.loss_ce: 0.2711  aux.acc_seg: 82.7498
08/06 02:36:49 - mmengine - INFO - Iter(train) [  2050/320000]  lr: 9.9429e-03  eta: 2 days, 4:01:03  time: 0.5836  data_time: 0.0052  memory: 7719  loss: 0.5257  decode.loss_ce: 0.3591  decode.acc_seg: 86.1856  aux.loss_ce: 0.1666  aux.acc_seg: 86.2196
08/06 02:37:18 - mmengine - INFO - Iter(train) [  2100/320000]  lr: 9.9415e-03  eta: 2 days, 3:59:57  time: 0.5840  data_time: 0.0052  memory: 7719  loss: 0.6113  decode.loss_ce: 0.4182  decode.acc_seg: 87.7535  aux.loss_ce: 0.1930  aux.acc_seg: 87.9992
08/06 02:37:47 - mmengine - INFO - Iter(train) [  2150/320000]  lr: 9.9401e-03  eta: 2 days, 3:58:52  time: 0.5842  data_time: 0.0052  memory: 7719  loss: 0.8058  decode.loss_ce: 0.5613  decode.acc_seg: 79.0448  aux.loss_ce: 0.2446  aux.acc_seg: 78.1733
08/06 02:38:17 - mmengine - INFO - Iter(train) [  2200/320000]  lr: 9.9388e-03  eta: 2 days, 3:57:49  time: 0.5842  data_time: 0.0053  memory: 7719  loss: 0.7251  decode.loss_ce: 0.5009  decode.acc_seg: 84.0128  aux.loss_ce: 0.2242  aux.acc_seg: 83.7157
08/06 02:38:46 - mmengine - INFO - Iter(train) [  2250/320000]  lr: 9.9374e-03  eta: 2 days, 3:56:49  time: 0.5841  data_time: 0.0052  memory: 7720  loss: 0.7180  decode.loss_ce: 0.5026  decode.acc_seg: 93.4323  aux.loss_ce: 0.2154  aux.acc_seg: 93.8796
08/06 02:39:15 - mmengine - INFO - Iter(train) [  2300/320000]  lr: 9.9360e-03  eta: 2 days, 3:55:50  time: 0.5841  data_time: 0.0052  memory: 7719  loss: 0.7310  decode.loss_ce: 0.5047  decode.acc_seg: 85.6664  aux.loss_ce: 0.2263  aux.acc_seg: 82.5205
